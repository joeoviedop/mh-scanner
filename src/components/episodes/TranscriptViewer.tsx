"use client";

import React, { useState, useEffect } from "react";

interface TranscriptSegment {
  start: number;
  end: number;
  text: string;
}

interface Transcript {
  id: string;
  videoId: string;
  fullText: string;
  segments: TranscriptSegment[];
  wordCount: number;
  language: string | null;
  isAutoGenerated: boolean;
  fetchedAt: number;
  keywordMatches: string[];
  hasTherapyKeywords: boolean;
}

interface Episode {
  id: string;
  title: string;
  channelTitle: string;
  duration: string;
}

interface TranscriptViewerProps {
  episodeId: string;
  onClose: () => void;
}

export function TranscriptViewer({ episodeId, onClose }: TranscriptViewerProps) {
  const [transcript, setTranscript] = useState<Transcript | null>(null);
  const [episode, setEpisode] = useState<Episode | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<"full" | "segments">("full");

  useEffect(() => {
    fetchTranscript();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [episodeId]);

  const fetchTranscript = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch(`/api/episodes/${episodeId}/transcript`);
      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error || "Failed to load transcript");
      }

      setTranscript(data.transcript);
      setEpisode(data.episode);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load transcript");
    } finally {
      setLoading(false);
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  };

  const highlightKeywords = (text: string, keywords: string[]) => {
    if (!keywords || keywords.length === 0) return text;
    
    let highlightedText = text;
    keywords.forEach(keyword => {
      const regex = new RegExp(`\\b${keyword.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\$&')}\\b`, 'gi');
      highlightedText = highlightedText.replace(regex, `<mark class="bg-yellow-200 px-1 rounded">$&</mark>`);
    });
    
    return highlightedText;
  };

  if (loading) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p>Loading transcript...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          <h3 className="text-lg font-semibold text-red-600 mb-2">Error</h3>
          <p className="text-gray-600 mb-4">{error}</p>
          <div className="flex gap-2">
            <button
              onClick={fetchTranscript}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Retry
            </button>
            <button
              onClick={onClose}
              className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (!transcript) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
          <h3 className="text-lg font-semibold text-gray-600 mb-2">No Transcript</h3>
          <p className="text-gray-600 mb-4">No transcript found for this episode.</p>
          <button
            onClick={onClose}
            className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400"
          >
            Close
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full h-[90vh] flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-gray-200 flex-shrink-0">
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                {episode?.title || "Transcript"}
              </h2>
              <div className="text-sm text-gray-500 space-y-1">
                <p>Channel: {episode?.channelTitle}</p>
                <p>Duration: {episode?.duration}</p>
                <p>Video ID: {transcript.videoId}</p>
                <p>Word Count: {transcript.wordCount.toLocaleString()} words</p>
                <p>Language: {transcript.language || "Unknown"}</p>
                <p>Auto-generated: {transcript.isAutoGenerated ? "Yes" : "No"}</p>
                <p>Fetched: {new Date(transcript.fetchedAt).toLocaleString()}</p>
              </div>
              
              {/* Therapy Keywords */}
              {transcript.hasTherapyKeywords && transcript.keywordMatches.length > 0 && (
                <div className="mt-4">
                  <h4 className="text-sm font-medium text-green-700 mb-2">
                    üéØ Therapy Keywords Found ({transcript.keywordMatches.length})
                  </h4>
                  <div className="flex flex-wrap gap-1">
                    {transcript.keywordMatches.map((keyword, index) => (
                      <span
                        key={index}
                        className="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full"
                      >
                        {keyword}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>
            
            <button
              onClick={onClose}
              className="ml-4 p-2 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          {/* View Mode Toggle */}
          <div className="flex gap-2 mt-4">
            <button
              onClick={() => setViewMode("full")}
              className={`px-4 py-2 text-sm rounded-lg ${
                viewMode === "full"
                  ? "bg-blue-600 text-white"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              Full Text
            </button>
            <button
              onClick={() => setViewMode("segments")}
              className={`px-4 py-2 text-sm rounded-lg ${
                viewMode === "segments"
                  ? "bg-blue-600 text-white"
                  : "bg-gray-100 text-gray-700 hover:bg-gray-200"
              }`}
            >
              Timestamped Segments ({transcript.segments.length})
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {viewMode === "full" ? (
            <div className="prose max-w-none">
              <div 
                className="text-gray-700 leading-relaxed"
                dangerouslySetInnerHTML={{
                  __html: highlightKeywords(transcript.fullText, transcript.keywordMatches)
                }}
              />
            </div>
          ) : (
            <div className="space-y-4">
              {transcript.segments.map((segment, index) => (
                <div
                  key={index}
                  className="flex gap-4 p-4 bg-gray-50 rounded-lg hover:bg-gray-100"
                >
                  <div className="text-sm text-blue-600 font-mono whitespace-nowrap">
                    {formatTime(segment.start)} - {formatTime(segment.end)}
                  </div>
                  <div 
                    className="flex-1 text-gray-700"
                    dangerouslySetInnerHTML={{
                      __html: highlightKeywords(segment.text, transcript.keywordMatches)
                    }}
                  />
                </div>
              ))}
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-200 bg-gray-50 flex-shrink-0">
          <div className="flex justify-between items-center text-sm text-gray-600">
            <div>
              {transcript.hasTherapyKeywords ? (
                <span className="text-green-600">‚úÖ Contains therapy-related content</span>
              ) : (
                <span className="text-gray-500">‚ÑπÔ∏è No therapy keywords detected</span>
              )}
            </div>
            <button
              onClick={onClose}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
