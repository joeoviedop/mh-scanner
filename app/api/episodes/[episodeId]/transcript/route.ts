import { NextResponse } from "next/server";
import { ConvexHttpClient } from "convex/browser";

import { api } from "../../../../../convex/_generated/api";
import type { Id } from "../../../../../convex/_generated/dataModel";

function getConvexClient(): ConvexHttpClient {
  const url = process.env.NEXT_PUBLIC_CONVEX_URL;
  if (!url) {
    throw new Error("NEXT_PUBLIC_CONVEX_URL is not configured");
  }

  return new ConvexHttpClient(url);
}

export const runtime = "nodejs";

export async function GET(
  request: Request,
  context: { params: Promise<{ episodeId: string }> }
) {
  const { episodeId } = await context.params;

  if (!episodeId) {
    return NextResponse.json(
      { success: false, error: "episodeId is required" },
      { status: 400 }
    );
  }

  try {
    const convex = getConvexClient();
    
    // Get the transcript
    const transcript = await convex.query(api.transcriptions.getByEpisodeId, {
      episodeId: episodeId as Id<"episodes">,
    });

    if (!transcript) {
      return NextResponse.json(
        { success: false, error: "Transcript not found" },
        { status: 404 }
      );
    }

    // Get episode info for context
    const episode = await convex.query(api.episodes.getById, {
      id: episodeId as Id<"episodes">,
    });

    return NextResponse.json({
      success: true,
      transcript: {
        id: transcript._id,
        videoId: transcript.videoId,
        fullText: transcript.fullText,
        segments: transcript.segments,
        wordCount: transcript.wordCount,
        language: transcript.language,
        isAutoGenerated: transcript.isAutoGenerated,
        fetchedAt: transcript.fetchedAt,
        keywordMatches: transcript.keywordMatches,
        hasTherapyKeywords: transcript.hasTherapyKeywords,
      },
      episode: episode ? {
        id: episode._id,
        title: episode.title,
        channelTitle: episode.channelTitle,
        duration: episode.duration,
      } : null,
    });
  } catch (error) {
    const message = error instanceof Error ? error.message : "Failed to fetch transcript";
    return NextResponse.json(
      { success: false, error: message },
      { status: 500 }
    );
  }
}
