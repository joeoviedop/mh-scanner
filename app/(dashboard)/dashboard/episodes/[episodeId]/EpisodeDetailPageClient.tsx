"use client";

import React, { Fragment, useEffect, useMemo, useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { formatDistanceToNow } from "date-fns";

import { Badge } from "@/components/ui/badge";
import { Breadcrumb } from "@/components/ui/breadcrumb";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardTitle } from "@/components/ui/card";
import { SegmentedControl } from "@/components/ui/segmented-control";
import ProcessingStatus from "@/components/episodes/ProcessingStatus";
import MentionResults from "@/components/episodes/MentionResults";
import type { Id } from "@/convex/_generated/dataModel";

interface TranscriptSegment {
  start: number;
  end: number;
  text: string;
}

interface Transcript {
  id: string;
  videoId: string;
  fullText: string;
  segments: TranscriptSegment[];
  wordCount: number;
  language: string | null;
  isAutoGenerated: boolean;
  fetchedAt: number;
  keywordMatches: string[];
  hasTherapyKeywords: boolean;
}

interface Episode {
  _id: string;
  videoId: string;
  title: string;
  description: string;
  channelTitle: string;
  duration: string;
  publishedAt: number;
  thumbnailUrl?: string;
  viewCount?: string;
  likeCount?: string;
  commentCount?: string;
  hasTranscription: boolean;
  transcriptionFetchedAt?: number | null;
  transcriptionError?: string | null;
  hasBeenProcessed: boolean;
  hasMentions: boolean;
  mentionCount: number;
  status: "discovered" | "transcribing" | "processing" | "completed" | "error" | "skipped";
}

type SensitivityFlag =
  | "autolesion"
  | "suicidio"
  | "abuso"
  | "trauma"
  | "crisis"
  | "ninguna";

interface FragmentFeedbackSummary {
  total: number;
  positive: number;
  negative: number;
  approvalRate: number | null;
}

interface MentionFragment {
  _id: string;
  videoId: string;
  text: string;
  context: string;
  startTime: number;
  endTime: number;
  detectedAt: number;
  detectedAtIso?: string;
  confidenceScore: number;
  rankScore: number;
  feedbackSummary: FragmentFeedbackSummary;
  classification: {
    tema: "testimonio" | "recomendacion" | "reflexion" | "dato" | "otro";
    tono: "positivo" | "neutro" | "critico" | "preocupante";
    confianza: number;
    sensibilidad: SensitivityFlag[];
    razon?: string;
  };
}

interface FeedbackStats {
  totalFragments: number;
  fragmentsWithFeedback: number;
  feedbackCount: number;
  positiveFeedback: number;
  negativeFeedback: number;
  approvalRate: number | null;
  coverageRate: number;
  averageConfidence: number;
  averageRankScore: number;
  topIssues: { issue: string; count: number }[];
  promptRecommendations: string[];
}

interface EpisodeDetailPageClientProps {
  episodeId: string;
}

const STATUS_CONFIG: Record<
  Episode["status"],
  { label: string; badge: React.ComponentProps<typeof Badge>["variant"] }
> = {
  discovered: { label: "Discovering", badge: "neutral" },
  transcribing: { label: "Transcribing", badge: "warning" },
  processing: { label: "Processing", badge: "warning" },
  completed: { label: "Completed", badge: "success" },
  error: { label: "Needs attention", badge: "danger" },
  skipped: { label: "Skipped", badge: "outline" },
};

const SENTENCE_SPLIT_REGEX = /(?<=[.!?])\s+(?=<|[A-Za-zÁÉÍÓÚÜÑáéíóúüñ¿¡0-9])/u;
const KEYWORD_HIGHLIGHT_CLASS =
  "rounded-md bg-indigo-100 px-1 py-0.5 text-indigo-700";

function escapeRegex(value: string) {
  return value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}

function buildHighlightedNodes(
  text: string,
  keywords: string[],
): React.ReactNode[] {
  if (!keywords || keywords.length === 0) {
    return [text];
  }

  const normalizedKeywords = keywords
    .map((keyword) => keyword.trim())
    .filter((keyword) => keyword.length > 0);

  if (normalizedKeywords.length === 0) {
    return [text];
  }

  const escapedKeywords = normalizedKeywords.map(escapeRegex);
  const keywordLookup = new Set(
    normalizedKeywords.map((keyword) => keyword.toLowerCase()),
  );

  const regex = new RegExp(`\\b(${escapedKeywords.join("|")})\\b`, "gi");
  const parts = text.split(regex);

  return parts
    .filter((part) => part !== "")
    .map((part, index) => {
      const normalized = part.toLowerCase();
      if (keywordLookup.has(normalized)) {
        return (
          <mark
            key={`kw-${index}-${normalized}`}
            className={KEYWORD_HIGHLIGHT_CLASS}
          >
            {part}
          </mark>
        );
      }

      return <Fragment key={`txt-${index}`}>{part}</Fragment>;
    });
}

export default function EpisodeDetailPageClient({ episodeId }: EpisodeDetailPageClientProps) {
  const [episode, setEpisode] = useState<Episode | null>(null);
const [transcript, setTranscript] = useState<Transcript | null>(null);
  const [fragments, setFragments] = useState<MentionFragment[]>([]);
  const [loading, setLoading] = useState(true);
  const [transcriptLoading, setTranscriptLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [statusMessage, setStatusMessage] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<"full" | "segments">("full");
  const [feedbackStats, setFeedbackStats] = useState<FeedbackStats | null>(null);
  const [feedbackSubmitting, setFeedbackSubmitting] = useState<Record<string, boolean>>({});

  useEffect(() => {
    fetchEpisodeData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [episodeId]);

  const fetchEpisodeData = async () => {
    try {
      setLoading(true);
      setError(null);

      const episodeResponse = await fetch(`/api/episodes`);
      const episodeData = await episodeResponse.json();

      if (!episodeResponse.ok || !episodeData.success) {
        throw new Error("Failed to fetch episodes");
      }

      const foundEpisode = episodeData.episodes.find((ep: Episode) => ep._id === episodeId);
      if (!foundEpisode) {
        throw new Error("Episode not found");
      }

      setEpisode(foundEpisode);

      if (foundEpisode.hasTranscription) {
        await fetchTranscript();
        await fetchFragments();
      } else {
        setTranscript(null);
        setFragments([]);
        setFeedbackStats(null);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load episode");
    } finally {
      setLoading(false);
    }
  };

  const fetchTranscript = async () => {
    try {
      setTranscriptLoading(true);
      setError(null);

      const response = await fetch(`/api/episodes/${episodeId}/transcript`);
      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error || "Failed to load transcript");
      }

      setTranscript(data.transcript);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load transcript");
    } finally {
      setTranscriptLoading(false);
    }
  };

  const fetchFeedbackStats = async () => {
    try {
      const response = await fetch(`/api/episodes/${episodeId}/feedback-stats`, {
        cache: "no-store",
      });
      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error ?? "Failed to load feedback stats");
      }

      setFeedbackStats(data.stats);
    } catch (err) {
      setFeedbackStats(null);
      console.error(err);
    }
  };

  const fetchFragments = async () => {
    try {
      const response = await fetch(`/api/episodes/${episodeId}/fragments`);
      const data = await response.json();

      if (!response.ok || !data.success) {
        setFragments([]);
        setFeedbackStats(null);
        return;
      }

      setFragments(data.fragments || []);
      await fetchFeedbackStats();
    } catch (err) {
      setFragments([]);
      setFeedbackStats(null);
    }
  };

  const handleFeedbackSubmit = async (
    fragmentId: string,
    rating: "useful" | "not_useful",
    options?: { issues?: string[]; comment?: string },
  ) => {
    setError(null);
    setFeedbackSubmitting((prev) => ({
      ...prev,
      [fragmentId]: true,
    }));

    try {
      const response = await fetch("/api/feedback", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          fragmentId,
          rating,
          issues: options?.issues,
          comment: options?.comment,
          submittedBy: "dashboard_user",
        }),
      });

      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error ?? "No se pudo registrar el feedback");
      }

      await fetchFragments();
    } catch (err) {
      const message =
        err instanceof Error ? err.message : "No se pudo registrar el feedback";
      setError(message);
    } finally {
      setFeedbackSubmitting((prev) => {
        const { [fragmentId]: _removed, ...rest } = prev;
        return rest;
      });
    }
  };

  const handleFetchTranscription = async () => {
    if (!episode) return;

    try {
      setTranscriptLoading(true);
      setError(null);
      setStatusMessage(null);

      const response = await fetch("/api/youtube/fetch-captions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ episodeId: episode._id }),
      });

      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error ?? "Failed to fetch transcript");
      }

      if (data.result?.status === "completed") {
        setStatusMessage("Transcript fetched successfully.");
        await fetchEpisodeData();
      } else if (data.result?.status === "queued") {
        setStatusMessage("Transcription already in progress.");
      } else if (data.result?.status === "skipped") {
        setStatusMessage("Episode already has a transcript.");
      } else {
        setStatusMessage("Transcription request submitted.");
      }
    } catch (err) {
      const message = err instanceof Error ? err.message : "Failed to fetch transcript";
      setError(message);
    } finally {
      setTranscriptLoading(false);
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  };

  const formattedTranscriptParagraphs = useMemo(() => {
    if (!transcript) {
      return null;
    }

    const sentences = transcript.fullText
      .split(SENTENCE_SPLIT_REGEX)
      .map((sentence) => sentence.trim())
      .filter(Boolean);

    const paragraphs: string[] = [];
    let buffer: string[] = [];

    sentences.forEach((sentence) => {
      buffer.push(sentence);
      const bufferLength = buffer
        .map((chunk) => chunk.length)
        .reduce((acc, curr) => acc + curr, 0);

      if (bufferLength > 320 || buffer.length >= 3) {
        paragraphs.push(buffer.join(" "));
        buffer = [];
      }
    });

    if (buffer.length > 0) {
      paragraphs.push(buffer.join(" "));
    }

    return paragraphs.map((paragraph, index) => (
      <p key={`paragraph-${index}`}>
        {buildHighlightedNodes(paragraph, transcript.keywordMatches)}
      </p>
    ));
  }, [transcript]);

  const statusBadge = episode ? STATUS_CONFIG[episode.status] : null;

  function formatCompactNumber(value?: string) {
    if (!value) {
      return null;
    }
    const numeric = Number(value);
    if (Number.isNaN(numeric)) {
      return value;
    }
    if (numeric >= 1_000_000) {
      return `${(numeric / 1_000_000).toFixed(1)}M`;
    }
    if (numeric >= 1_000) {
      return `${(numeric / 1_000).toFixed(1)}K`;
    }
    return numeric.toString();
  }

  if (loading) {
    return (
      <div className="">
        <div className="">
          <span className="" />
          <p className="">Cargando episodio</p>
        </div>
      </div>
    );
  }

  if (error && !episode) {
    return (
      <div className="">
        <Card className="">
          <CardContent className="">
            <div className="">
              ⚠️
            </div>
            <CardTitle className="">Ocurrió un problema</CardTitle>
            <CardDescription className="">{error}</CardDescription>
            <Button asChild>
              <Link href="/dashboard/episodes">← Volver a episodios</Link>
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (!episode) {
    return (
      <div className="">
        <Card className="">
          <CardContent className="">
            <div className="">
              📺
            </div>
            <CardTitle className="">No encontramos el episodio</CardTitle>
            <CardDescription className="">
              El episodio que intentas abrir no está disponible.
            </CardDescription>
            <Button asChild>
              <Link href="/dashboard/episodes">← Volver a episodios</Link>
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const publishedRelative = formatDistanceToNow(new Date(episode.publishedAt), { addSuffix: true });
  const transcriptionUpdated = episode.transcriptionFetchedAt
    ? formatDistanceToNow(new Date(episode.transcriptionFetchedAt), { addSuffix: true })
    : null;
  const viewCount = formatCompactNumber(episode.viewCount);

  return (
    <div className="">
      <header className="">
        <Breadcrumb
          items={[
            { label: "Inicio", href: "/dashboard" },
            { label: "Episodios", href: "/dashboard/episodes" },
            { label: episode.title || "Detalle" },
          ]}
        />
        <div className="">
          <div className="">
            <p className="">
              Podcast Therapy Scanner
            </p>
            <h1 className="">{episode.title}</h1>
            <p className="">
              Revisa la transcripción, ejecuta la detección de menciones y comparte hallazgos claros con el equipo.
            </p>
          </div>
          <div className="">
            {statusBadge ? (
              <Badge variant={statusBadge.badge} className="">
                {statusBadge.label}
              </Badge>
            ) : null}
            {episode.hasMentions ? <Badge variant="success">Menciones detectadas</Badge> : null}
            {episode.hasBeenProcessed && !episode.hasMentions ? (
              <Badge variant="neutral">Procesado</Badge>
            ) : null}
          </div>
        </div>
      </header>

      {statusMessage ? (
        <div className="">
          {statusMessage}
        </div>
      ) : null}

      {error ? (
        <div className="">
          {error}
        </div>
      ) : null}

      <div className="">
        <aside className="">
          <section className="">
            <div className="">
              {episode.thumbnailUrl ? (
                <Image
                  src={episode.thumbnailUrl}
                  alt={episode.title}
                  fill
                  sizes="(min-width: 1280px) 360px, 100vw"
                  className="object-cover"
                />
              ) : (
                <div className="">🎧</div>
              )}
            </div>
            <div className="">
              <div className="">
                {statusBadge ? (
                  <Badge variant={statusBadge.badge} className="">
                    {statusBadge.label}
                  </Badge>
                ) : null}
                {episode.hasMentions ? <Badge variant="success">Menciones detectadas</Badge> : null}
                {episode.hasBeenProcessed && !episode.hasMentions ? (
                  <Badge variant="neutral">Procesado</Badge>
                ) : null}
              </div>
              <dl className="">
                <div className="">
                  <dt className="">Canal</dt>
                  <dd className="">{episode.channelTitle}</dd>
                </div>
                <div className="">
                  <dt className="">Publicado</dt>
                  <dd className="">{publishedRelative}</dd>
                </div>
                <div className="">
                  <dt className="">Duración</dt>
                  <dd className="">{episode.duration}</dd>
                </div>
                <div className="">
                  <dt className="">Menciones</dt>
                  <dd className="">
                    {episode.mentionCount > 0 ? episode.mentionCount : "—"}
                  </dd>
                </div>
                {viewCount ? (
                  <div className="">
                    <dt className="">Vistas</dt>
                    <dd className="">{viewCount}</dd>
                  </div>
                ) : null}
              </dl>
            </div>
          </section>

          <section className="">
            <h2 className="">
              Acciones rápidas
            </h2>
            <div className="">
              <Button asChild variant="secondary" className="w-full">
                <a
                  href={`https://www.youtube.com/watch?v=${episode.videoId}`}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Abrir en YouTube
                </a>
              </Button>

              {!episode.hasTranscription && episode.status !== "skipped" ? (
                <Button
                  onClick={handleFetchTranscription}
                  isLoading={transcriptLoading || episode.status === "transcribing"}
                  loadingLabel="Obteniendo transcripción…"
                  className="w-full"
                >
                  Obtener transcripción
                </Button>
              ) : null}

              {episode.hasTranscription ? (
                <div className="">
                  <p className="">Transcripción lista</p>
                  {transcriptionUpdated ? (
                    <p className="">Actualizada {transcriptionUpdated}</p>
                  ) : null}
                </div>
              ) : null}
            </div>

            {episode.hasTranscription ? (
              <div className="">
                <ProcessingStatus
                  episodeId={episodeId as Id<"episodes">}
                  onCompletion={async () => {
                    await fetchEpisodeData();
                    await fetchFragments();
                  }}
                />
              </div>
            ) : null}
          </section>

          {episode.description ? (
            <section className="">
              <h2 className="">
                Resumen del episodio
              </h2>
              <p className="">{episode.description}</p>
            </section>
          ) : null}
        </aside>

        <section className="">
          {episode.hasTranscription ? (
            <>
              <div className="">
                <div>
                  <h2 className="">Transcripción</h2>
                  {transcript ? (
                    <p className="">
                      {transcript.wordCount.toLocaleString()} palabras · {transcript.language || "Idioma desconocido"}
                      {transcript.isAutoGenerated ? " · Generada automáticamente" : ""}
                    </p>
                  ) : (
                    <p className="">Cargando transcripción…</p>
                  )}
                </div>
                {transcript ? (
                  <SegmentedControl
                    value={viewMode}
                    onChange={(value) => setViewMode(value as "full" | "segments")}
                    options={[
                      { value: "full", label: "Texto completo" },
                      {
                        value: "segments",
                        label: "Segmentos",
                        hint: transcript.segments.length,
                      },
                    ]}
                  />
                ) : null}
              </div>

              {transcript?.hasTherapyKeywords && transcript.keywordMatches.length > 0 ? (
                <div className="">
                  {transcript.keywordMatches.map((keyword) => (
                    <Badge key={keyword} variant="default" className="">
                      {keyword}
                    </Badge>
                  ))}
                </div>
              ) : null}

              <div className="">
                {transcriptLoading ? (
                  <div className="">
                    <span className="" />
                    Cargando transcripción…
                  </div>
                ) : transcript ? (
                  <div className="">
                    {viewMode === "full" ? (
                      <div className="">
                        {formattedTranscriptParagraphs}
                      </div>
                    ) : (
                      <div className="">
                        {transcript.segments.map((segment, index) => (
                          <div
                            key={`${segment.start}-${segment.end}-${index}`}
                            className=""
                          >
                            <div className="">
                              <span>{formatTime(segment.start)}</span>
                              <span>{formatTime(segment.end)}</span>
                            </div>
                            <div className="">
                              {buildHighlightedNodes(segment.text, transcript.keywordMatches)}
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ) : (
                  <div className="">
                    La transcripción aún no está disponible. Solicítala desde las acciones rápidas.
                  </div>
                )}
              </div>
            </>
          ) : (
            <div className="">
              <span className="">
                📝
              </span>
              <h2 className="">Transcripción pendiente</h2>
              <p className="">
                Obtén la transcripción para habilitar la detección de menciones y los análisis automáticos para este episodio.
              </p>
              <Button
                onClick={handleFetchTranscription}
                isLoading={transcriptLoading || episode.status === "transcribing"}
              >
                Obtener transcripción
              </Button>
            </div>
          )}
        </section>
      </div>

      <section className="">
        <MentionResults
          fragments={fragments}
          episodeTitle={episode.title}
          channelName={episode.channelTitle}
          onRefresh={fetchFragments}
          onFeedback={handleFeedbackSubmit}
          feedbackSubmitting={feedbackSubmitting}
          feedbackStats={feedbackStats}
        />
      </section>
    </div>
  );
}
