"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import { formatDistanceToNow } from "date-fns";
import ProcessingStatus from "../../../../../src/components/episodes/ProcessingStatus";
import MentionResults from "../../../../../src/components/episodes/MentionResults";
import type { Id } from "../../../../../convex/_generated/dataModel";

interface TranscriptSegment {
  start: number;
  end: number;
  text: string;
}

interface Transcript {
  id: string;
  videoId: string;
  fullText: string;
  segments: TranscriptSegment[];
  wordCount: number;
  language: string | null;
  isAutoGenerated: boolean;
  fetchedAt: number;
  keywordMatches: string[];
  hasTherapyKeywords: boolean;
}

interface Episode {
  _id: string;
  videoId: string;
  title: string;
  description: string;
  channelTitle: string;
  duration: string;
  publishedAt: number;
  thumbnailUrl?: string;
  hasTranscription: boolean;
  transcriptionFetchedAt?: number | null;
  transcriptionError?: string | null;
  hasBeenProcessed: boolean;
  hasMentions: boolean;
  mentionCount: number;
  status: "discovered" | "transcribing" | "processing" | "completed" | "error" | "skipped";
}

interface Fragment {
  _id: string;
  text: string;
  context: string;
  startTime: number;
  endTime: number;
  detectedAt: number;
  youtubeUrl: string;
  classification: {
    tema: string;
    tono: string;
    confianza: number;
    sensibilidad: string[];
    razon?: string;
  };
}

interface EpisodeDetailPageClientProps {
  episodeId: string;
}

export default function EpisodeDetailPageClient({ episodeId }: EpisodeDetailPageClientProps) {
  const [episode, setEpisode] = useState<Episode | null>(null);
  const [transcript, setTranscript] = useState<Transcript | null>(null);
  const [fragments, setFragments] = useState<Fragment[]>([]);
  const [loading, setLoading] = useState(true);
  const [transcriptLoading, setTranscriptLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [statusMessage, setStatusMessage] = useState<string | null>(null);
  const [viewMode, setViewMode] = useState<"full" | "segments">("full");

  useEffect(() => {
    fetchEpisodeData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [episodeId]);

  const fetchEpisodeData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch episode details
      const episodeResponse = await fetch(`/api/episodes`);
      const episodeData = await episodeResponse.json();

      if (!episodeResponse.ok || !episodeData.success) {
        throw new Error("Failed to fetch episodes");
      }

      const foundEpisode = episodeData.episodes.find((ep: Episode) => ep._id === episodeId);
      if (!foundEpisode) {
        throw new Error("Episode not found");
      }

      setEpisode(foundEpisode);

      // If episode has transcript, fetch it
      if (foundEpisode.hasTranscription) {
        await fetchTranscript();
        await fetchFragments();
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load episode");
    } finally {
      setLoading(false);
    }
  };

  const fetchTranscript = async () => {
    try {
      setTranscriptLoading(true);
      setError(null);

      const response = await fetch(`/api/episodes/${episodeId}/transcript`);
      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error || "Failed to load transcript");
      }

      setTranscript(data.transcript);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to load transcript");
    } finally {
      setTranscriptLoading(false);
    }
  };

  const fetchFragments = async () => {
    try {
      const response = await fetch(`/api/episodes/${episodeId}/fragments`);
      const data = await response.json();

      if (!response.ok || !data.success) {
        // Fragments might not exist yet, that's okay
        setFragments([]);
        return;
      }

      setFragments(data.fragments || []);
    } catch (err) {
      // Fragments might not exist yet, that's okay
      setFragments([]);
    }
  };

  const handleFetchTranscription = async () => {
    if (!episode) return;

    try {
      setTranscriptLoading(true);
      setError(null);
      setStatusMessage(null);

      const response = await fetch("/api/youtube/fetch-captions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ episodeId: episode._id }),
      });

      const data = await response.json();

      if (!response.ok || !data.success) {
        throw new Error(data.error ?? "Failed to fetch transcript");
      }

      if (data.result?.status === "completed") {
        setStatusMessage("Transcript fetched successfully.");
        await fetchEpisodeData(); // Refresh all data
      } else if (data.result?.status === "queued") {
        setStatusMessage("Transcription already in progress.");
      } else if (data.result?.status === "skipped") {
        setStatusMessage("Episode already has a transcript.");
      } else {
        setStatusMessage("Transcription request submitted.");
      }
    } catch (err) {
      const message = err instanceof Error ? err.message : "Failed to fetch transcript";
      setError(message);
    } finally {
      setTranscriptLoading(false);
    }
  };



  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  };



  const highlightKeywords = (text: string, keywords: string[]) => {
    if (!keywords || keywords.length === 0) return text;
    
    let highlightedText = text;
    keywords.forEach(keyword => {
      const regex = new RegExp(`\\b${keyword.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\$&')}\\b`, 'gi');
      highlightedText = highlightedText.replace(regex, `<mark class="bg-yellow-200 px-1 rounded">$&</mark>`);
    });
    
    return highlightedText;
  };

  const getStatusColor = (status: Episode["status"]) => {
    switch (status) {
      case "discovered":
        return "bg-blue-100 text-blue-800";
      case "transcribing":
        return "bg-yellow-100 text-yellow-800";
      case "processing":
        return "bg-orange-100 text-orange-800";
      case "completed":
        return "bg-green-100 text-green-800";
      case "error":
        return "bg-red-100 text-red-800";
      case "skipped":
        return "bg-gray-100 text-gray-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status: Episode["status"]) => {
    switch (status) {
      case "discovered":
        return "üì• Discovered";
      case "transcribing":
        return "üìù Getting Transcript";
      case "processing":
        return "üîç Processing";
      case "completed":
        return "‚úÖ Completed";
      case "error":
        return "‚ùå Error";
      case "skipped":
        return "‚è≠Ô∏è Skipped";
      default:
        return status;
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading episode...</p>
        </div>
      </div>
    );
  }

  if (error && !episode) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center max-w-md">
          <div className="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Error</h1>
          <p className="text-gray-600 mb-4">{error}</p>
          <Link
            href="/dashboard/episodes"
            className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            ‚Üê Back to Episodes
          </Link>
        </div>
      </div>
    );
  }

  if (!episode) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center max-w-md">
          <div className="text-gray-400 text-6xl mb-4">üì∫</div>
          <h1 className="text-2xl font-bold text-gray-900 mb-2">Episode Not Found</h1>
          <p className="text-gray-600 mb-4">The episode you&apos;re looking for doesn&apos;t exist.</p>
          <Link
            href="/dashboard/episodes"
            className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
          >
            ‚Üê Back to Episodes
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-4">
              <Link
                href="/dashboard/episodes"
                className="text-gray-400 hover:text-gray-600 text-sm font-medium"
              >
                ‚Üê Episodes
              </Link>
              <div className="h-6 w-px bg-gray-300"></div>
              <h1 className="text-lg font-semibold text-gray-900">Episode Detail</h1>
            </div>
            
            <div className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(episode.status)}`}>
              {getStatusText(episode.status)}
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Status Messages */}
        {statusMessage && (
          <div className="mb-6 rounded-md border border-green-200 bg-green-50 px-4 py-3 text-sm text-green-800">
            {statusMessage}
          </div>
        )}

        {error && (
          <div className="mb-6 rounded-md border border-red-200 bg-red-50 px-4 py-3 text-sm text-red-700">
            {error}
          </div>
        )}

        {/* Episode Info */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 mb-8">
          <div className="p-6">
            <div className="flex gap-6">
              {/* Thumbnail */}
              <div className="flex-shrink-0">
                {episode.thumbnailUrl ? (
                  <img
                    src={episode.thumbnailUrl}
                    alt={episode.title}
                    className="w-48 h-28 object-cover rounded-lg"
                  />
                ) : (
                  <div className="w-48 h-28 bg-gray-200 rounded-lg flex items-center justify-center">
                    <span className="text-gray-400 text-3xl">üé•</span>
                  </div>
                )}
              </div>

              {/* Episode Details */}
              <div className="flex-1 min-w-0">
                <h2 className="text-xl font-semibold text-gray-900 mb-2 line-clamp-2">
                  {episode.title}
                </h2>
                
                <div className="text-sm text-gray-600 space-y-1 mb-4">
                  <p>Channel: {episode.channelTitle}</p>
                  <p>Duration: {episode.duration}</p>
                  <p>Published: {formatDistanceToNow(new Date(episode.publishedAt), { addSuffix: true })}</p>
                  {episode.transcriptionFetchedAt && (
                    <p>Transcript fetched: {formatDistanceToNow(new Date(episode.transcriptionFetchedAt), { addSuffix: true })}</p>
                  )}
                </div>

                {episode.description && (
                  <p className="text-sm text-gray-600 line-clamp-3">
                    {episode.description}
                  </p>
                )}
              </div>

              {/* Actions */}
              <div className="flex-shrink-0 space-y-3">
                <a
                  href={`https://www.youtube.com/watch?v=${episode.videoId}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="block w-full px-4 py-2 bg-red-600 text-white text-center rounded-lg hover:bg-red-700"
                >
                  üîó Open on YouTube
                </a>
                
                {!episode.hasTranscription && episode.status !== "skipped" && (
                  <button
                    onClick={handleFetchTranscription}
                    disabled={transcriptLoading || episode.status === "transcribing"}
                    className="block w-full px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    {transcriptLoading || episode.status === "transcribing"
                      ? "‚è≥ Fetching..."
                      : "üìù Fetch Transcript"}
                  </button>
                )}
                
                {episode.hasTranscription && (
                  <ProcessingStatus 
                    episodeId={episodeId as Id<"episodes">}
                    onCompletion={async () => {
                      await fetchEpisodeData();
                      await fetchFragments();
                    }}
                  />
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Transcript Section */}
        {episode.hasTranscription && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 mb-8">
            <div className="border-b border-gray-200 p-6">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">Transcript</h3>
                  {transcript && (
                    <div className="text-sm text-gray-500 mt-1">
                      {transcript.wordCount.toLocaleString()} words ‚Ä¢ {transcript.language || "Unknown language"}
                      {transcript.isAutoGenerated && " ‚Ä¢ Auto-generated"}
                    </div>
                  )}
                </div>
                
                {transcript && (
                  <div className="flex gap-2">
                    <button
                      onClick={() => setViewMode("full")}
                      className={`px-4 py-2 text-sm rounded-lg ${
                        viewMode === "full"
                          ? "bg-blue-600 text-white"
                          : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                      }`}
                    >
                      Full Text
                    </button>
                    <button
                      onClick={() => setViewMode("segments")}
                      className={`px-4 py-2 text-sm rounded-lg ${
                        viewMode === "segments"
                          ? "bg-blue-600 text-white"
                          : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                      }`}
                    >
                      Segments ({transcript.segments.length})
                    </button>
                  </div>
                )}
              </div>
              
              {transcript?.hasTherapyKeywords && transcript.keywordMatches.length > 0 && (
                <div className="mt-4">
                  <h4 className="text-sm font-medium text-green-700 mb-2">
                    üéØ Therapy Keywords Found ({transcript.keywordMatches.length})
                  </h4>
                  <div className="flex flex-wrap gap-1">
                    {transcript.keywordMatches.map((keyword, index) => (
                      <span
                        key={index}
                        className="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full"
                      >
                        {keyword}
                      </span>
                    ))}
                  </div>
                </div>
              )}
            </div>

            <div className="p-6">
              {transcriptLoading ? (
                <div className="text-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
                  <p className="text-gray-500">Loading transcript...</p>
                </div>
              ) : transcript ? (
                <div className="max-h-96 overflow-y-auto">
                  {viewMode === "full" ? (
                    <div className="prose max-w-none">
                      <div 
                        className="text-gray-700 leading-relaxed"
                        dangerouslySetInnerHTML={{
                          __html: highlightKeywords(transcript.fullText, transcript.keywordMatches)
                        }}
                      />
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {transcript.segments.map((segment, index) => (
                        <div
                          key={index}
                          className="flex gap-4 p-3 bg-gray-50 rounded-lg hover:bg-gray-100"
                        >
                          <div className="text-sm text-blue-600 font-mono whitespace-nowrap">
                            {formatTime(segment.start)} - {formatTime(segment.end)}
                          </div>
                          <div 
                            className="flex-1 text-gray-700 text-sm"
                            dangerouslySetInnerHTML={{
                              __html: highlightKeywords(segment.text, transcript.keywordMatches)
                            }}
                          />
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <div className="text-4xl mb-4">üìù</div>
                  <p>No transcript available yet.</p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Fragments/Mentions Section */}
        <MentionResults
          fragments={fragments.map(fragment => ({
            _id: fragment._id,
            startTime: fragment.startTime,
            endTime: fragment.endTime,
            matchedText: fragment.text,
            contextText: fragment.context,
            matchedKeywords: [],
            videoId: episode.videoId,
            classification: {
              tema: fragment.classification.tema,
              tono: fragment.classification.tono as "positiva" | "neutral" | "negativa",
              sensibilidad: fragment.classification.sensibilidad,
              confianza: fragment.classification.confianza,
              razon: fragment.classification.razon,
            },
            confidenceScore: fragment.classification.confianza,
            detectedAt: fragment.detectedAt,
          }))}
          episodeTitle={episode.title}
          channelName={episode.channelTitle}
          onRefresh={async () => {
            await fetchFragments();
          }}
        />
      </div>
    </div>
  );
}
