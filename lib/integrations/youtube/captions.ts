import { fetchTranscriptFromApify } from "../apify/transcript";

export type CaptionSegment = {
  start: number;
  end: number;
  text: string;
};

export type CaptionResult = {
  videoId: string;
  captionId: string;
  language: string | null;
  isAutoGenerated: boolean;
  segments: CaptionSegment[];
  fullText: string;
  wordCount: number;
  source: "apify";
};

export type CaptionFetchDebug = {
  apify: {
    runId: string | null;
    datasetId?: string;
    itemCount: number;
    actorId: string;
  };
};

export type CaptionFetchOutcome = {
  result: CaptionResult | null;
  debug: CaptionFetchDebug;
};

export class YouTubeCaptionsError extends Error {
  constructor(message: string, public readonly status?: number) {
    super(message);
    this.name = "YouTubeCaptionsError";
  }
}

function buildResult(
  videoId: string,
  segments: CaptionSegment[],
  debug: CaptionFetchDebug["apify"],
): CaptionResult {
  const fullText = segments.map((segment) => segment.text).join(" ");
  const wordCount = fullText ? fullText.split(/\s+/).filter(Boolean).length : 0;

  return {
    videoId,
    captionId: debug.datasetId ?? debug.runId ?? "apify",
    language: null,
    isAutoGenerated: true,
    segments,
    fullText,
    wordCount,
    source: "apify",
  };
}

export async function fetchCaptions(videoId: string): Promise<CaptionFetchOutcome> {
  if (!videoId) {
    throw new YouTubeCaptionsError("Missing videoId");
  }

  const defaultDebug: CaptionFetchDebug = {
    apify: {
      runId: null,
      datasetId: undefined,
      itemCount: 0,
      actorId: process.env.APIFY_ACTOR_ID?.trim() || "pintostudio~youtube-transcript-scraper",
    },
  };

  try {
    const apifyResult = await fetchTranscriptFromApify(videoId);
    if (!apifyResult) {
      return { result: null, debug: defaultDebug };
    }

    const debug = {
      apify: apifyResult.debug,
    } satisfies CaptionFetchDebug;

    if (!apifyResult.debug.actorId) {
      debug.apify.actorId = defaultDebug.apify.actorId;
    }

    return {
      result: buildResult(videoId, apifyResult.segments, debug.apify),
      debug,
    };
  } catch (error) {
    if (process.env.NODE_ENV !== "production") {
      console.warn("[captions] apify transcript retrieval failed", { videoId, error });
    }
    return { result: null, debug: defaultDebug };
  }
}

export function summarizeSegments(segments: CaptionSegment[]): {
  start: number;
  end: number;
  text: string;
}[] {
  return segments.map((segment) => ({
    start: segment.start,
    end: segment.end,
    text: segment.text,
  }));
}
